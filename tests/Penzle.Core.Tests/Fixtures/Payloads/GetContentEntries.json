{
  "hasNextPage": false,
  "hasPreviousPage": false,
  "items": [
    {
      "fields": {
        "title": "Getting started with Penzle",
        "slug": "getting-started-with-penzle",
        "banner": "e879281a-a225-4f82-a4af-740884dcee1b",
        "thumbnail": "14d3984a-e40c-4b9d-9f1d-a00ecd1ca2ba",
        "thumbnailLandscape": "f0bb2184-a55b-4421-a6d2-c520c8b14f9d",
        "description": "With the help of Penzle's headless content platform, developers can use the toolkits and languages most appropriate for the project.",
        "body": "<p>If you are reading this, it means you have probably heard about what Penzle is and what Penzle does, and most likely you want to turn a heap of content that you already have into something more presentable. A modern looking web page, or maybe a mobile app of some sort? We don't know what it is exactly that you are looking for, and maybe you are also not so sure yourself, but you are still interested to know if Penzle might help you get there more easily.</p>\n<p>Look no further. Whatever it is you want to do, <em><strong>Penzle can do it</strong></em>.</p>\n<p>Well... not <em>everything</em>, but if it's about content, chances are Penzle can handle it. How can you host your content in an organized way, facilitating easy change and maintenance with simple data access? Oh, that's not it... you just want to know how to get from a bunch of text and images to a nice looking web page? This is almost the same question as the first one, only with less tech words.</p>\n<p>The aim of this article is to guide you through this ordeal, from the sign-up process up until you view your content somewhere as a result.</p>\n<p><a href=\"https://penzle.com/sign-up\" rel=\"nofollow\">Sign-up process</a> is as simple as you would imagine it to be, just type in some basic information and then check your inbox for that welcome message with the rest of instructions.</p>\n<h2>Penzle Dashboard</h2>\n<p>Upon using your credentials for the first time you are greeted with what I am sure seems like a challenging dashboard for a first-time user. Don't worry, you will know it like the back of your hand after you start publishing your own content.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/7067f81bcdf6406f984cbeb027af347e.png\" alt=\"Penzle Home Screen\" /></p>\n<p>Now you would need to <em><strong>create your project</strong></em>, an ecosystem where all your content will live, but let's keep this as simple as possible. Penzle has a <em><strong>Default Project</strong></em> created just for this purpose, so you can get comfortable working with it.</p>\n<p>First thing you have to make sure is that you have our <em><strong>Default Project</strong></em> selected in the top left corner. Sidebar menu is (always) related to the project that you have selected. This enables a clear separation between different projects and easy navigation.</p>\n<h2>Create your content</h2>\n<p>Next thing to learn is how to create your content and where to put it. There are two most important menu items you need to know about in order to achieve this:</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/a2e890df29f74bcdb4a9d50a31297beb.png\" alt=\"Penzle sidebar\" /></p>\n<ol>\n<li><em><strong>How can I create a form matching my content structure?</strong></em> - In CMS slang we are talking about a data template. If, for example, you want to publish your weekly blogs, then your usual content consists of a blog title, author, body, and maybe even date of creation. In the sidebar menu navigate to <code>Development -&gt; Data Templates</code> and then click the action button <em><strong>New data template</strong></em>.</li>\n</ol>\n<p>Template design view that opens up will be quite intuitive, and you can just drag and drop the fields you need to cover the structure of your content. Here is how it looks on our <code>Blog Post</code> template. You can refine settings for each field individually by using <code>Settings</code> on the fields you have added to your template.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/858a7993575d45789472993a34fb45c5.png\" alt=\"Penzle data template\" /></p>\n<p>You will also notice we've created a template for the blog post author, along with an author list so that we can manage a complete list of authors under a single folder.</p>\n<ol start=\"2\">\n<li><em><strong>Where can I start creating my content?</strong></em> - Navigate to <code>Content Editing -&gt; Content Editor</code>. This is the place where all your content will live in a hierarchically organized structure. Create a selection of blogs by using <em><strong>Add Entry</strong></em> action button and selecting your previously created data template. You can select each one of the new items you have created and write your content or copy/paste it if you have it prepared beforehand.</li>\n</ol>\n<p>For demonstration purposes, we have created a list of authors and a blog post example as part of <em><strong>Default Project</strong></em> content.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/c15f839339a240ed9246303f92f0de3b.png\" alt=\"Penzle Default Project Content\" /></p>\n<p>When adding an author to a blog post, we want to limit the author selection to the list of authors we have previously created. To do this you can navigate back to your blog post template, and go to <code>Settings</code> for <code>Author</code> field on your template. If you expand the <code>Start Node</code> option, you will see we have pointed it to <code>/content/Authors</code> where the list of all authors is located.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/5c5cbd7740b3416e857d1f2e27c18a49.png\" alt=\"Penzle Blog Post Author Settings\" /></p>\n<p>There are far more options for a complete publishing workflow, as Penzle allows you to plan your decisions and have full control over content transformation steps.</p>\n<p>It can be as simple as saving entered content in order to publish it, or you can add nuances like workflow for content approval/translation, version management and much more. Read the <a href=\"https://github.com/Penzle\">official Penzle documentation</a> for guides on how to use these.</p>\n<h2>Authenticating your project</h2>\n<p>Penzle is structurally a headless CMS system, meaning its primary concern is content management &amp; delivery. As a Penzle consumer, you always have the absolute freedom to use the content provided by Penzle however you want, whether it be for a Web app, Raspberry Pi, iOS/Android mobile app or something else.</p>\n<p>To communicate with Penzle in order to fetch created content, you will need to use your project Id and create an access token.</p>\n<p>You can create access tokens for a specific project; simply navigate to Settings in the dashboard sidebar menu, and then go to <code>Projects -&gt; [select your project] -&gt; API Tokens</code>. Write in the token name, description and expiry date. You can choose between two types of tokens:</p>\n<ul>\n<li><em><strong>Content delivery token</strong></em> - granting you the ability to retrieve and read data</li>\n<li><em><strong>Content management token</strong></em> - granting you the ability to also modify data and save changes</li>\n</ul>\n<p>Choose token environment (by default this is set to <code>main</code>, but you can easily create other environments like <code>dev</code>, <code>staging</code> or <code>production</code>).</p>\n<h2><em><strong>Bonus</strong></em> - Retrieving your content in .net environment</h2>\n<p>Follow the <a href=\"https://github.com/Penzle/Penzle.Net/blob/main/docs/configuration.md\">steps outlined in this configuration guide</a> to use your created tokens in scope of your .net application.</p>\n<p>Then create a DTO model compatible with your data template:</p>\n<div class=\"highlight highlight-source-cs\">\n<pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">BlogPost</span>\n{\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">string</span> <span class=\"pl-en\">Title</span> { <span class=\"pl-k\">get</span>; <span class=\"pl-k\">set</span>; }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">string</span> <span class=\"pl-en\">Body</span> { <span class=\"pl-k\">get</span>; <span class=\"pl-k\">set</span>; }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">string</span> <span class=\"pl-en\">Author</span> { <span class=\"pl-k\">get</span>; <span class=\"pl-k\">set</span>; }\n}</pre>\n</div>\n<p>All that remains is data retrieval using <code>IPenzleClient</code>:</p>\n<div class=\"highlight highlight-source-cs\">\n<pre><span class=\"pl-k\">var</span> <span class=\"pl-en\">blogPost</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">_deliveryClient</span>\n    .<span class=\"pl-smi\">Entry</span>\n    .<span class=\"pl-smi\">GetEntry</span><span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">BlogPost</span><span class=\"pl-k\">&gt;</span>\n    (\n    \t<span class=\"pl-smi\">entryId</span>: <span class=\"pl-k\">new</span> <span class=\"pl-en\">Guid</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2bcfc9f2-8d12-494b-b56e-8145bb4aa3a3<span class=\"pl-pds\">\"</span></span>),\n    \t<span class=\"pl-smi\">cancellationToken</span>: <span class=\"pl-smi\">CancellationToken</span>.<span class=\"pl-smi\">None</span>\n    );</pre>\n</div>\n<p>entryId can be obtained using the info tab on content of interest, as shown below:</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/19f62198208b4452b7b258ffe8df0d56.png\" alt=\"Penzle - Obtain Entry Id\" /></p>",
        "relatedArticle": "c442e7ef-155e-4c28-8fe6-c094d07946ea"
      },
      "system": {
        "template": "article",
        "id": "4d40413f-587c-442b-949e-c44771096ee3",
        "parentId": "16ea7830-fc9c-42f8-9b19-fe9d9c3d31bd",
        "name": "Getting started with Penzle",
        "version": null,
        "language": null,
        "aliasPath": "/content/Blog/Getting started with Penzle",
        "slug": null,
        "modifiedAt": "2022-11-08T07:53:09",
        "createdAt": "2022-10-25T08:48:10"
      },
      "base": [
        {
          "template": "metadata",
          "fields": {
            "metaTitle": "Getting started with Penzle",
            "metaDescription": "With the help of Penzle's headless content platform, developers can use the toolkits and languages most appropriate for the project."
          }
        }
      ]
    },
    {
      "fields": {
        "title": "How to Start With Your Application's Performance Optimization",
        "slug": "how-to-start-with-your-application-s-performance-optimization",
        "banner": "39c52443-a266-48b3-a2dd-9a35b127102a",
        "thumbnail": "a3456285-b5a6-4a3a-8522-628d9630ac7a",
        "thumbnailLandscape": "f40e1b20-5d57-41e6-839c-1540b6ebc2e3",
        "description": "If you want to compete with the best, your system needs to be fast and scalable. Many systems run into performance and scalability problems as they grow. How to start and what should the first step be?",
        "body": "<p>If you want to compete with the best, your system needs to be fast and scalable. I have recently seen a large number of clients facing problems with their application performance. Many systems run into performance and scalability problems as they grow. How to start and what should the first step be? Optimization can be a deadly trap and a time-waster. There is always something you can do better if you have the time, money and motivation.</p>\n<p>The real trick is knowing where to look for performance and what steps to take first. What steps to consider when doing performance improvements and how to avoid common mistakes?</p>\n<p>Modern applications are getting increasingly complex - they process huge amounts of data, communicate with external systems, and support for different time zones became an engineering nightmare. Some systems need to be re-engineered from scratch to handle their growth. If you are building a new application, performance work should never be left at the end! The larger and more complex your application is, the earlier you need to start considering performance as a major feature.</p>\n<p>Before we dive in, let&rsquo;s highlight the difference between performance and scalability, due to frequent misunderstanding between the two concepts.</p>\n<h2>The Difference Between Performance and Scalability</h2>\n<p>Everybody knows how important it is to keep a system fast. Very often our clients require their system to be fast. The first question I ask is <strong><em>What do you mean by fast</em></strong>? The usual answer is that It needs to support thousands of users. A system can be slow and still support thousands of users.</p>\n<p>A site&rsquo;s performance decreases the time it takes for a particular page to load or for a particular user-visible action to complete. What a single user sees while sitting at their computer is &ldquo;performance&rdquo;.</p>\n<p>Scalability is connected to the number of users a site can support. If additional users can be supported by adding more hardware and network bandwidth, the site can be considered as &ldquo;scalable&rdquo;. If more hardware and network bandwidth do not solve the problem, additional users cause the site to slow down, which implies that the site has reached its scalability threshold.</p>\n<h2>Planning a Performance Investigation</h2>\n<p>Application involves complicated business processes that do not always focus on performance. When a feature works slowly, is it not always possible to accelerate the code. Before you dive deep into the code and try to accelerate part of the code related to your feature, make a plan for your performance.</p>\n<ol>\n<li>Identify problems and goals and determine what to measure</li>\n<li>Select methods and tools &nbsp;</li>\n<li>Analysis and Conclusion</li>\n</ol>\n<h2>Identify Problems and Goals and Determine What to Measure</h2>\n<p>First, ask yourself a few important questions:</p>\n<ul>\n<li>What is wrong with the current performance level?</li>\n<li>What do I want to achieve?</li>\n</ul>\n<p>If you start to randomly optimize your application, it will be a waste of time. Define problems and goals. Determine a set of performance requirements. Those requirements will determine which metrics you need to collect. You need concise, well-defined metrics that correspond to the goals. After obtaining the results, you should be flexible to change your goals.</p>\n<p>A lot of things are involved and make sure you consider the right path. Observe aspects such as memory - measurement of memory usage and reduction. You want to measure memory usage and minimize it. But which kind of memory? Commit size, large object heap size, .NET heap size or some other variant?&nbsp;For tracking&nbsp;memory usage over time, the average per hour or peak? Be as specific as possible when describing what you want to measure and define your goals well.<br /><strong>Not well-defined:</strong> Memory should be less than 1 GB.<br /><strong>Well-defined:</strong> Working set memory usage should never exceed 1 GB during peak load of 100 queries per second.</p>\n<p>Let&rsquo;s check out some of the most popular methods and tools.</p>\n<h2>Select Methods and Tools</h2>\n<p>There are many tools and methods that provide performance metrics. After performance analysis, make sure that the tool you select has the required characteristics such as precision, portability, etc.</p>\n<h3>Coder review</h3>\n<p>Particular code performance issues can sometimes be identified without measurements. Check the asymptotic complexity, big O notation, database query, or ineffective piece of code. You can solve some performance issues without analysis. Keep in mind that personal feelings can easily deceive you as well as technology change.</p>\n<h3>Profiling</h3>\n<p>Where to start when optimizing your application? Optimizing a random method may not affect the performance of the whole application. Trying to write fast code can increase code complexity and introduce new bugs. <br />The most important step is to find where the application spends a significant part of its time. The best way to do it is profiling. That means you take a profile, attach it to the application, take a snapshot and look at the profile. Profiling shows methods that are called frequently, and bottlenecks of your application. That helps you locate the most critical methods that require optimization first.</p>\n<h3>Monitoring</h3>\n<p>Certain problems can not sometimes be reproduced locally since they occur rarely or only in the production environment. In this case, profiling can not help and monitoring needs to be conducted to find a method with performance problems. There are a lot of built-in monitoring tools such as event log. Take data from logs and try to find the source of this problem.</p>\n<h3>Performance tests</h3>\n<p>It&rsquo;s common practice to write unit tests that ensure that the business logic works fine after any changes to your code. Unit tests are not enough to measure performances. To make sure your performance stays the same before and after changes, you need performance tests. To maintain the same level of performances in your tests, you need to have exactly the same environment (hardware + software) for all the benchmarking configurations.</p>\n<p>If your tests are executed in a different environment each time, you will most likely have different results. Executing the same tests in an environment that has more hardware will affect your tests to be executed faster. Therefore, it is crucial to run tests on the same server environment. The performance tests can be executed on a build server, as part of a continuous integration (CI) pipeline.</p>\n<h3>Benchmarking</h3>\n<p>A benchmark measures performance properties of a piece of code especially to compare it to an alternative implementation. For benchmark tests, it&rsquo;s important to maintain the same version of a .NET runtime, an operating system, hardware, and so on. Run your benchmark tests in more iterations to achieve sufficient accuracy. Benchmarks are amazing when they test a single resource such as CPU time. You can test other things like reading files off an SSD, but you will need to isolate those resources from outside influence.</p>\n<h2>Analysis and Conclusion</h2>\n<blockquote>\n<p>&ldquo;If you have spent less than a week studying a benchmark result, it is probably wrong.&rdquo; <br />- Brendan Gregg, author of Systems Performance: Enterprise</p>\n</blockquote>\n<p>An analysis is the most important part of any performance investigation. Do not take results fast and adapt the solution on the whole application, for example: &ldquo;Profiler shows that method A is faster than method B. Let&rsquo;s use A everywhere instead of B&rdquo;. We should understand why we got such results in profiler sessions. If you use one set of data,&nbsp; method A may be faster, but you should take in consideration the whole application and different set of data. Method A can probably be substantially slower than method B in some other cases.</p>\n<p>Most of the performance mistakes are caused in the measurement methodology. Check other data patterns before you decide on the method in the production code. Be careful with analysis before you make a conclusion.</p>\n<h2>Conclusion</h2>\n<p>Planning a performance investigation requires more steps. Those steps can be customized to your needs. I covered the three most important steps that should be involved in any investigation. Identifying problems and goals, and determining what to measure should be your first step. Next step is monitoring, which helps you find a slow user scenario. The profiling will help you identify the bottleneck of your methods. Benchmarks will find the fastest way to implement the feature. Performance tests will help keep the performance on the same level in the future.</p>\n<p>All approaches have a purpose and use. Last step of any investigation is data analysis and conclusion. The more time you spend in data analysis and measurement, it&rsquo;s more likely that your performance investigation is done properly.&nbsp;</p>",
        "relatedArticle": "4d40413f-587c-442b-949e-c44771096ee3"
      },
      "system": {
        "template": "article",
        "id": "c442e7ef-155e-4c28-8fe6-c094d07946ea",
        "parentId": "16ea7830-fc9c-42f8-9b19-fe9d9c3d31bd",
        "name": "How to Start With Your Application's Performance Optimization",
        "version": null,
        "language": null,
        "aliasPath": "/content/Blog/How to Start With Your Application's Performance Optimization",
        "slug": null,
        "modifiedAt": "2022-11-06T20:59:11",
        "createdAt": "2022-10-29T21:50:31"
      },
      "base": [
        {
          "template": "metadata",
          "fields": {
            "metaTitle": "How to Start With Your Application's Performance Optimization",
            "metaDescription": "If you want to compete with the best, your system needs to be fast and scalable. Many systems run into performance and scalability problems as they grow. How to start and what should the first step be?"
          }
        }
      ]
    },
    {
      "fields": {
        "title": "State of automation testing",
        "slug": "state-of-automation-testing",
        "banner": "57d704d5-b131-4751-8ea6-68255c4fd1bb",
        "thumbnail": "81fa9565-ebc9-4b76-8537-c2941dfa8224",
        "thumbnailLandscape": "ca95856d-9ab0-45c2-a98a-c6d0d69decf9",
        "description": "For an average guy making it in IT, I’m sure you’ve barely seen a project with a budget approved for automation testing.",
        "body": "<p>For an average guy making it in IT, I&rsquo;m sure you&rsquo;ve barely seen a project with a budget approved for automation testing. Because sales is primarily concerned with closing the deal no matter what, the quoted project price is slashed in the blink of an eye by eliminating <strong><em>nice to have</em></strong> automation testing.</p>\n<p>If we&rsquo;re talking about a startup or a smaller project, this decision can be perfectly fine, but for any project lasting more than six months, it might not be. In the case of a project that has multiple user scenarios operating the application, new feature developments or change requests will naturally cause an increase in regression testing. Ignoring automation testing is a cause of great concern if the project is put on a more aggressive schedule with a staging environment available to end users.</p>\n<p>The automation testing market size is expected to grow from $20.7 billion to $49.9 billion by 2026, growing at a <a href=\"https://www.marketsandmarkets.com/Market-Reports/automation-testing-market-113583451.html\">CAGR of 19.2% during the forecast period </a>. Even if we use a more modest forecast of 14.2% CAGR reported by Mordor Intelligence, it is still a definite and palpable increase. This rise is owed to the increase in the adoption of automated testing methods among enterprises and SME&rsquo;s.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/69af320a87824a5e85918e79901eff17.png\" alt=\"Automation Testing Growth Forecast 2021-2026\" /></p>\n<p>We can even see some new trends like smart automation testing, where your codebase is scanned for changes and only tests relating to those changes are executed, a gradual move towards helper frameworks that enable you to write codeless automation tests (AT&rsquo;s) by recording desired application scenarios, to implement cloud based cross-browser testing as well as AT integration into CI/CD loop.</p>\n<p>Most of these trends gravitate towards some quality of life improvement, <strong><em>but</em></strong> only after you have finished writing your AT suite. I&rsquo;d love to talk about the most essential step after writing automation tests, which is the integration of the testing cycle into the CI/CD pipeline, but we have to start things from the beginning.</p>\n<h2 id=\"training-of-new-automation-testers\">Training of new automation testers</h2>\n<p>In our experience, onboarding new personnel to quickly write their first automation test (and from there on the rest of them) has never been a problem. The amount of time that an individual needs to get familiar with the framework and write their first test is the only variable.</p>\n<p><strong><em>The challenge was to get them to quickly grasp the concept of a good test.</em></strong></p>\n<p>Onboarding a person with a QA background is challenging from a software development perspective. They are familiar with the concepts and approaches to testing, but it is difficult to quickly teach them coding strategies and design patterns. Onboarding a developer tends to be more difficult, on the other hand, from a testing theory perspective, especially if they have not been involved in projects requiring large unit testing code coverage.</p>\n<p>A knowledge gap can be conquered with time and effort, but as a rule, it is easier to teach good testing fundamentals and their applications to a software engineer than for a QA specialist to grasp how to write good code. With that rule in mind, let&rsquo;s quickly cover the fundamentals of good testing. &nbsp;</p>\n<h2 id=\"what-is-a-good-test\">What is a good test?</h2>\n<p>Let&rsquo;s start with a simpler question: what is a test?</p>\n<blockquote>\n<p>&ldquo;A unit test is a piece of code (usually a method) that invokes another piece of code and checks the correctness of some assumptions afterward. If the assumptions turn out to be wrong, the unit test has failed. A unit is a method or function.&rdquo; - <strong><em><a href=\"https://www.manning.com/books/the-art-of-unit-testing-second-edition\">The Art of Unit Testing Second Edition</a></em></strong></p>\n</blockquote>\n<p>We can easily refine and adapt this general definition to automation testing.</p>\n<blockquote>\n<p>Automation testing of a task invokes a piece of code interacting with the UI and checks one specific end result of that task. If the assumption turns out to be wrong, the automation test has failed. It is consistent in its results as long as the production code has not changed. It is readable, maintainable, and trustworthy.</p>\n</blockquote>\n<p>I will highlight the important changes.</p>\n<ul>\n<li><strong><em>Checking one specific end result of a task</em></strong> - We reject complex tests in favor of many simpler ones. Every test should have a single responsibility for testing.&nbsp;</li>\n<li><strong><em>It's consistent in its result as long as the code has not changed</em></strong> - Also known as the definition of a <a href=\"https://www.infinitymesh.com/blog/how-to-write-good-automation-tests/\">stable test</a>. Unstable/flaky tests will sometimes pass and sometimes fail and thus should be omitted from the test suite.</li>\n</ul>\n<p>The final three qualities deserve their own chapter.</p>\n<h2 id=\"readable-tests\">Readable Tests</h2>\n<p>A key trait of any good test is that it should be easy to read, and the intent of the test author should be clear. To achieve readability, the most important thing is to have a good test name, but it also helps to separate assertions from actions, to have good variable naming, and to eliminate magic values.</p>\n<p><em>Roy Osherove</em>, the author of The Art of Unit Testing, talks about three important pieces of information that always need to be present in the test name:</p>\n<ol>\n<li>The name of the feature being tested</li>\n<li>The scenario under which you are testing&nbsp;</li>\n<li>The expected behavior</li>\n</ol>\n<p>If you want to test that entering an incorrect password on the login page causes an alert, use the names <code>LoginPage_Password_Should_AlertIfInvalid()</code> or <code>LoginPage_When_UsingIncorrectPassword_Alert_Should_BeDisplayed()</code>.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/ea92ea2d44c24e3483355e3a1f5ecdea.png\" alt=\"Best naming practices\" /></p>\n<p>In the context of automation testing, the most important magic values you should stop yourself from using are field locators.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/79121ff6ac504129ab2a13d2e18f6579.png\" alt=\"Avoid using magic values in field locators.\" /></p>\n<h2 id=\"trustworthy-tests\">Trustworthy Tests</h2>\n<blockquote>\n<p><strong><em>If you can&rsquo;t trust your tests, you can&rsquo;t run your tests</em></strong></p>\n</blockquote>\n<p>It&rsquo;s as simple as that. Any test which sometimes passes and sometimes fails due to factors not controlled by the test itself, you will want to exclude from your testing suite.</p>\n<p>Once you make your tests a part of your build or deploy pipeline, every time your developer sees a 100% pass rate, he should be happy and confident that his new piece of code is working as expected and did not break anything that previously used to work.</p>\n<p>The best way to achieve trustworthiness is to write short, readable tests that focus on testing one specific thing. Troubleshooting a suspicious test is very straightforward. You carefully debug the test to ensure you did not make any mistakes during the test process, and if it still fails, then good job. You have just identified a bug in production. If it passes after fixing, make sure it <strong><em>consistently</em></strong> produces the same results before marking it as fixed.</p>\n<h2 id=\"maintainable-tests\">Maintainable Tests</h2>\n<p>In the field of automation testing, the main cause of test changes would be UI changes. This would mean some of your locators are no longer correct. Sometimes this is unavoidable, but by proper communication with the front-end engineer, you can ensure that this does not happen often.</p>\n<p>Use ID to find page elements in the case of a web app. If ID is not available, make sure you have specific classes on key elements that you can easily target. Agreed element classes should always be kept, even in the case of a frontend refactoring. If you have managed to restrain yourself from using magic values for element locators, then you probably have them listed in a single place. You can always critically look at your locator code and identify what can be improved.</p>\n<p><img src=\"https://pnzdemostorageaccount.blob.core.windows.net/cappy/7f89e72eaee846e3841dbfbbd9c93dca.png\" alt=\"Refactor bad locators\" /></p>\n<p>To improve the maintainability of tests, you can use good code writing practices, but this should be something that you constantly research on your own and not the topic of this article.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Readable tests are trustworthy because it is immediately apparent what they are doing. That is exactly what makes them maintainable. This means that readability is a key trait of a good test, even if that wasn&rsquo;t apparent at first glance. When onboarding new automation testing engineers, you should ensure they have a good grasp of these fundamentals. It's easy to go along with the <strong><em>&ldquo;agile&rdquo;</em></strong> way of development and throw them into the fire to make them write their first test as soon as possible, but what good will it do if you end up with an unusable test suite that doesn&rsquo;t help your development cycle in the end?</p>\n<p>In the next article, I will cover the inclusion of tests in the CI/CD pipeline.</p>",
        "relatedArticle": "4d40413f-587c-442b-949e-c44771096ee3"
      },
      "system": {
        "template": "article",
        "id": "288de6da-bc30-4fa1-845b-d331c9cc4a3b",
        "parentId": "16ea7830-fc9c-42f8-9b19-fe9d9c3d31bd",
        "name": "State of automation testing",
        "version": null,
        "language": null,
        "aliasPath": "/content/Blog/State of automation testing",
        "slug": null,
        "modifiedAt": "2022-11-06T20:59:23",
        "createdAt": "2022-10-31T23:25:05"
      },
      "base": [
        {
          "template": "metadata",
          "fields": {
            "metaTitle": "State of automation testing",
            "metaDescription": "For an average guy making it in IT, I’m sure you’ve barely seen a project with a budget approved for automation testing."
          }
        }
      ]
    }
  ],
  "pageIndex": 0,
  "pageSize": 10,
  "totalCount": 3,
  "totalPages": 1
}